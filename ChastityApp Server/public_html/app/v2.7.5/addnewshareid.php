<?php
header("Cache-Control: no-cache, must-revalidate");
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");

try {
    include "../../../includes/app.php";
    
    if ($userID1 == $userID2) {
        $query = $pdo->prepare("insert into ShareableLocks_V2 (
            id,
            user_id,
            share_id,
            block_test_locks,
            block_users_already_locked,
            block_users_with_stats_hidden,
            build,
            card_info_hidden,
            check_in_frequency_in_seconds,
            created,
            cumulative,
            fixed,
            force_trust,
            key_disabled,
            keyholder_decision_disabled,
            late_check_in_window_in_seconds,
            max_auto_resets,
            max_random_copies,
            max_random_double_ups,
            max_random_freezes,
            max_random_greens,
            max_random_minutes,
            max_random_reds,
            max_random_resets,
            max_random_stickies,
            max_random_yellows,
            max_random_yellows_add,
            max_random_yellows_minus,
            maximum_users,
            min_random_copies,
            min_random_double_ups,
            min_random_freezes,
            min_random_greens,
            min_random_minutes,
            min_random_reds,
            min_random_resets,
            min_random_stickies,
            min_random_yellows,
            min_random_yellows_add,
            min_random_yellows_minus,
            min_rating_required,
            minimum_version_required,
            multiple_greens_required,
            regularity,
            require_dm,
            reset_frequency_in_seconds,
            simulation_average_minutes_locked,
            simulation_best_case_minutes_locked,
            simulation_worst_case_minutes_locked,
            start_lock_frozen,
            timer_hidden,
            version
        ) values (
            '',
            :userID,
            :shareID,
            :blockTestLocks,
            :blockUsersAlreadyLocked,
            :blockUsersWithStatsHidden,
            :build,
            :cardInfoHidden,
            :checkInFrequencyInSeconds,
            NOW(),
            :cumulative,
            :fixed,
            :forceTrust,
            :keyDisabled,
            :keyholderDecisionDisabled,
            :lateCheckInWindowInSeconds,
            :maxAutoResets,
            :maxCopies,
            :maxDoubleUps,
            :maxFreezes,
            :maxGreens,
            :maxMinutes,
            :maxReds,
            :maxResets,
            :maxStickies,
            :maxYellowsRandom,
            :maxYellowsAdd,
            :maxYellowsMinus,
            :maxUsers,
            :minCopies,
            :minDoubleUps,
            :minFreezes,
            :minGreens,
            :minMinutes,
            :minReds,
            :minResets,
            :minStickies,
            :minYellowsRandom,
            :minYellowsAdd,
            :minYellowsMinus,
            :minRatingRequired,
            :minVersionRequired,
            :multipleGreensRequired,
            :regularity,
            :requireDM,
            :resetFrequencyInSeconds,
            :simulationAverageMinutesLocked,
            :simulationBestCaseMinutesLocked,
            :simulationWorstCaseMinutesLocked,
            :startLockFrozen,
            :timerHidden,
            :version)");
        $query->execute(array(
            'shareID' => $_POST['shareID'],
            'userID' => $userID1,
            'blockTestLocks' => $_POST['blockTestLocks'],
            'blockUsersAlreadyLocked' => $_POST['blockUsersAlreadyLocked'],
            'blockUsersWithStatsHidden' => $_POST['blockUsersWithStatsHidden'],
            'build' => $_POST['build'],
            'cardInfoHidden' => $_POST['cardInfoHidden'],
            'checkInFrequencyInSeconds' => $_POST['checkInFrequencyInSeconds'],
            'cumulative' => $_POST['cumulative'],
            'fixed' => $_POST['fixed'],
            'forceTrust' => $_POST['forceTrust'],
            'keyDisabled' => $_POST['keyDisabled'],
            'keyholderDecisionDisabled' => $_POST['keyholderDecisionDisabled'],
            'lateCheckInWindowInSeconds' => $_POST['lateCheckInWindowInSeconds'],
            'maxAutoResets' => $_POST['maxAutoResets'],
            'maxCopies' => $_POST['maxCopies'],
            'maxDoubleUps' => $_POST['maxDoubleUps'],
            'maxFreezes' => $_POST['maxFreezes'],
            'maxGreens' => $_POST['maxGreens'],
            'maxMinutes' => $_POST['maxMinutes'],
            'maxReds' => $_POST['maxReds'],
            'maxResets' => $_POST['maxResets'],
            'maxStickies' => $_POST['maxStickies'],
            'maxUsers' => $_POST['maxUsers'],
            'maxYellowsRandom' => $_POST['maxYellowsRandom'],
            'maxYellowsAdd' => $_POST['maxYellowsAdd'],
            'maxYellowsMinus' => $_POST['maxYellowsMinus'],
            'minCopies' => $_POST['minCopies'],
            'minDoubleUps' => $_POST['minDoubleUps'],
            'minFreezes' => $_POST['minFreezes'],
            'minGreens' => $_POST['minGreens'],
            'minMinutes' => $_POST['minMinutes'],
            'minRatingRequired' => $_POST['minRatingRequired'],
            'minReds' => $_POST['minReds'],
            'minResets' => $_POST['minResets'],
            'minStickies' => $_POST['minStickies'],
            'minVersionRequired' => $_POST['minVersionRequired'],
            'minYellowsRandom' => $_POST['minYellowsRandom'],
            'minYellowsAdd' => $_POST['minYellowsAdd'],
            'minYellowsMinus' => $_POST['minYellowsMinus'],
            'multipleGreensRequired' => $_POST['multipleGreensRequired'],
            'regularity' => $_POST['regularity'],
            'requireDM' => $_POST['requireDM'],
            'resetFrequencyInSeconds' => $_POST['resetFrequencyInSeconds'],
            'simulationAverageMinutesLocked' => $_POST['simulationAverageMinutesLocked'],
            'simulationBestCaseMinutesLocked' => $_POST['simulationBestCaseMinutesLocked'],
            'simulationWorstCaseMinutesLocked' => $_POST['simulationWorstCaseMinutesLocked'],
            'startLockFrozen' => $_POST['startLockFrozen'],
            'timerHidden' => $_POST['timerHidden'],
            'version' => $_POST['version']));
    }
    $query = null;
    $pdo = null;
} catch (PDOException $e) {
    print "Error!: " . $e->getMessage() . "<br/>";
    die();
}
?>